{
  "workbench.colorTheme": "One Dark Pro",
  "workbench.iconTheme": "material-icon-theme",
  "workbench.startupEditor": "none",
  "files.autoSave": "afterDelay",
  "extensions.ignoreRecommendations": true,
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  "editor.formatOnSave": true,
  "editor.cursorSmoothCaretAnimation": "on",
  "editor.cursorBlinking": "phase",
  "editor.rulers": [100],
  // vim
  "vim.handleKeys": {
    "<C-w>": false,
    "<C-a>": false,
    "<C-c>": false,
    "<C-v>": false,
    "<C-n>": false,
    "<C-f>": false,
    "<C-k>": false,
    "<C-i>": false
  },
  "vim.insertModeKeyBindings": [
    {
      "before": ["j", "k"],
      "after": ["<esc>"]
    }
  ],
  // git
  "git.confirmSync": false,
  "git.enableSmartCommit": true,
  // python
  "python.languageServer": "Pylance",
  "autoDocstring.docstringFormat": "one-line-sphinx",
  // typescript
  "typescript.format.placeOpenBraceOnNewLineForControlBlocks": true,
  "typescript.format.placeOpenBraceOnNewLineForFunctions": true,
  "javascript.format.placeOpenBraceOnNewLineForControlBlocks": true,
  "javascript.format.placeOpenBraceOnNewLineForFunctions": true,
  "typescript.format.enable": true,
  "[typescript]": {
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.quickSuggestions": {
      "strings": true
    },
    "editor.suggest.insertMode": "replace",
    "editor.tabSize": 2
  },
  "[javascript]": {
    "editor.maxTokenizationLineLength": 2500,
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescriptreact]": {
    "editor.tabSize": 2
  },
  // C / CPP
  "C_Cpp.codeAnalysis.clangTidy.enabled": true,
  "C_Cpp.codeAnalysis.clangTidy.checks.enabled": [
    "bugprone-argument-comment",
    "bugprone-assert-side-effect",
    "bugprone-bad-signal-to-kill-thread",
    "bugprone-branch-clone",
    "bugprone-copy-constructor-init",
    "bugprone-dangling-handle",
    "bugprone-dynamic-static-initializers",
    "bugprone-fold-init-type",
    "bugprone-forward-declaration-namespace",
    "bugprone-forwarding-reference-overload",
    "bugprone-inaccurate-erase",
    "bugprone-incorrect-roundings",
    "bugprone-integer-division",
    "bugprone-lambda-function-name",
    "bugprone-macro-parentheses",
    "bugprone-macro-repeated-side-effects",
    "bugprone-misplaced-operator-in-strlen-in-alloc",
    "bugprone-misplaced-pointer-arithmetic-in-alloc",
    "bugprone-misplaced-widening-cast",
    "bugprone-move-forwarding-reference",
    "bugprone-multiple-statement-macro",
    "bugprone-narrowing-conversions",
    "bugprone-no-escape",
    "bugprone-not-null-terminated-result",
    "bugprone-parent-virtual-call",
    "bugprone-posix-return",
    "bugprone-reserved-identifier",
    "bugprone-sizeof-container",
    "bugprone-sizeof-expression",
    "bugprone-string-constructor",
    "bugprone-string-integer-assignment",
    "bugprone-string-literal-with-embedded-nul",
    "bugprone-suspicious-enum-usage",
    "bugprone-suspicious-include",
    "bugprone-suspicious-memory-comparison",
    "bugprone-suspicious-memset-usage",
    "bugprone-suspicious-missing-comma",
    "bugprone-suspicious-semicolon",
    "bugprone-suspicious-string-compare",
    "bugprone-swapped-arguments",
    "bugprone-terminating-continue",
    "bugprone-throw-keyword-missing",
    "bugprone-too-small-loop-variable",
    "bugprone-undefined-memory-manipulation",
    "bugprone-undelegated-constructor",
    "bugprone-unhandled-self-assignment",
    "bugprone-unused-raii",
    "bugprone-unused-return-value",
    "bugprone-use-after-move",
    "bugprone-virtual-near-miss",
    "boost-use-to-string",
    "cert-dcl03-c",
    "cert-dcl21-cpp",
    "cert-dcl58-cpp",
    "cert-err34-c",
    "cert-err52-cpp",
    "cert-err58-cpp",
    "cert-err60-cpp",
    "cert-flp30-c",
    "cert-msc50-cpp",
    "cert-msc51-cpp",
    "cert-oop54-cpp",
    "cert-str34-c",
    "cppcoreguidelines-interfaces-global-init",
    "cppcoreguidelines-narrowing-conversions",
    "cppcoreguidelines-pro-type-member-init",
    "cppcoreguidelines-pro-type-static-cast-downcast",
    "cppcoreguidelines-slicing",
    "google-default-arguments",
    "google-explicit-constructor",
    "google-runtime-operator",
    "hicpp-exception-baseclass",
    "hicpp-multiway-paths-covered",
    "hicpp-signed-bitwise",
    "misc-misplaced-const",
    "misc-new-delete-overloads",
    "misc-no-recursion",
    "misc-non-copyable-objects",
    "misc-redundant-expression",
    "misc-static-assert",
    "misc-throw-by-value-catch-by-reference",
    "misc-unconventional-assign-operator",
    "misc-uniqueptr-reset-release",
    "modernize-avoid-bind",
    "modernize-concat-nested-namespaces",
    "modernize-deprecated-headers",
    "modernize-deprecated-ios-base-aliases",
    "modernize-loop-convert",
    "modernize-make-shared",
    "modernize-make-unique",
    "modernize-pass-by-value",
    "modernize-raw-string-literal",
    "modernize-redundant-void-arg",
    "modernize-replace-auto-ptr",
    "modernize-replace-disallow-copy-and-assign-macro",
    "modernize-replace-random-shuffle",
    "modernize-return-braced-init-list",
    "modernize-shrink-to-fit",
    "modernize-unary-static-assert",
    "modernize-use-auto",
    "modernize-use-bool-literals",
    "modernize-use-emplace",
    "modernize-use-equals-default",
    "modernize-use-equals-delete",
    "modernize-use-nodiscard",
    "modernize-use-noexcept",
    "modernize-use-nullptr",
    "modernize-use-override",
    "modernize-use-transparent-functors",
    "modernize-use-uncaught-exceptions",
    "mpi-buffer-deref",
    "mpi-type-mismatch",
    "openmp-use-default-none",
    "performance-faster-string-find",
    "performance-for-range-copy",
    "performance-implicit-conversion-in-loop",
    "performance-inefficient-algorithm",
    "performance-inefficient-string-concatenation",
    "performance-inefficient-vector-operation",
    "performance-move-const-arg",
    "performance-move-constructor-init",
    "performance-no-automatic-move",
    "performance-noexcept-move-constructor",
    "performance-trivially-destructible",
    "performance-type-promotion-in-math-fn",
    "performance-unnecessary-copy-initialization",
    "performance-unnecessary-value-param",
    "portability-simd-intrinsics",
    "readability-avoid-const-params-in-decls",
    "readability-const-return-type",
    "readability-container-size-empty",
    "readability-convert-member-functions-to-static",
    "readability-delete-null-pointer",
    "readability-inconsistent-declaration-parameter-name",
    "readability-make-member-function-const",
    "readability-misleading-indentation",
    "readability-misplaced-array-index",
    "readability-non-const-parameter",
    "readability-redundant-control-flow",
    "readability-redundant-declaration",
    "readability-redundant-function-ptr-dereference",
    "readability-redundant-smartptr-get",
    "readability-redundant-string-cstr",
    "readability-redundant-string-init",
    "readability-simplify-subscript-expr",
    "readability-static-accessed-through-instance",
    "readability-static-definition-in-anonymous-namespace",
    "readability-string-compare",
    "readability-uniqueptr-delete-release",
    "readability-use-anyofallof"
  ],
  "diffEditor.ignoreTrimWhitespace": false,
  "[python]": {
    "editor.formatOnType": true,
    "editor.defaultFormatter": "ms-python.black-formatter"
  },
  "window.zoomLevel": 1,
  "[dart]": {
    // Automatically format code on save and during typing of certain characters
    // (like `;` and `}`).
    "editor.formatOnSave": true,
    "editor.formatOnType": true,

    // Draw a guide line at 80 characters, where Dart's formatting will wrap code.
    "editor.rulers": [80],

    // Disables built-in highlighting of words that match your selection. Without
    // this, all instances of the selected text will be highlighted, interfering
    // with Dart's ability to highlight only exact references to the selected variable.
    "editor.selectionHighlight": false,

    // By default, VS Code will pre-select the most recently used item from code
    // completion. This is usually not the most relevant item.
    //
    // "first" will always select top item
    // "recentlyUsedByPrefix" will filter the recently used items based on the
    //     text immediately preceding where completion was invoked.
    "editor.suggestSelection": "first",
    "editor.quickSuggestions": {
      "other": "off",
      "comments": "off",
      "strings": "off"
    },

    // Allows pressing <TAB> to complete snippets such as `for` even when the
    // completion list is not visible.
    "editor.tabCompletion": "onlySnippets",

    // By default, VS Code will populate code completion with words found in the
    // current file when a language service does not provide its own completions.
    // This results in code completion suggesting words when editing comments and
    // strings. This setting will prevent that.
    "editor.wordBasedSuggestions": "off"
  },
  "python.formatting.provider": "none",
  "python.analysis.typeCheckingMode": "standard"
}
